syntax = "proto3";
package tistreampb;

import "eventpb.proto";
import "schemapb.proto";

option go_package = "./";

// Upstream notify downstream there are new data change files for specified tenants.
message HasNewChangeReq {
    repeated uint64 tenant_id = 1;
}

message HasNewChangeResp {
}

message DispatcherHeartbeatReq {
    string addr = 1; // dispatcher addr, used to distiguish dispatchers.
    uint64 throughput = 2; // throughput since last heartbeat.
    repeated TenantSubStats tenant_stats = 3; // tenant id and throughput.
}

message DispatcherHeartbeatResp {
}

message SorterHeartbeatReq {
    string addr = 1; // sorter addr, used to distiguish dispatchers.
    uint64 throughput = 2; // throughput since last heartbeat.
    repeated TenantSubStats tenant_stats = 3; // tenant id and throughput.
}

message SorterHeartbeatResp {
}

message Task {
    message Range {
        bytes start = 1;
        bytes end = 2;
        string uuid = 3; // unique id for a range. it is used as the folder name for the range.
    }

    uint64 tenant_id = 1;
    Range range = 2;
    string sorter_addr = 3;
    string snap_addr = 4;
}

message RangeChangesReq {
    Task.Range range = 1;
    repeated EventRow rows = 2;
    repeated EventWatermark watermarks = 3;
}

message RangeChangesResp {
}

message TenantSubStats {
    uint64 tenant_id = 1;
    Task.Range range = 2;
    uint64 throughput = 3;
}

message TenantTasksReq {
    uint64 tenant_id = 1;
    repeated Task tasks = 2;
    TaskOp op = 3;
}

message TenantTasksResp {
}

enum TaskOp {
    Attach = 0;
    Detach = 1;
}

message PullTenantDataReq {
    uint64 tenant_id = 1;
    Task.Range range = 2;
    uint64 low_watermark = 3;
    uint64 high_watermark = 4;
}

message PullTenantDataResp {
    repeated EventRow rows = 1;
}

// Snapshot of all ranges for a tenant at a specified timestamp.
message RangesSnapshot {
    uint64 tenant_id = 1;
    uint64 ts = 2;
    repeated Task.Range ranges = 3;
}

message RegisterDDLReq {
    uint64 tenant_id = 1;
    uint64 ts = 2;
    string ddl = 3;
}

message RegisterDDLResp {
}

message RegisterSchemaSnapReq {
    uint64 tenant_id = 1;
    uint64 ts = 2;
    string schema = 3;
}

message RegisterSchemaSnapResp {
}