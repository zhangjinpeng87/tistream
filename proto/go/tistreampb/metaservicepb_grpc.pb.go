// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: metaservicepb.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServiceClient interface {
	TenantHasNewChange(ctx context.Context, in *HasNewChangeReq, opts ...grpc.CallOption) (*HasNewChangeResp, error)
	DispatcherHeartbeat(ctx context.Context, in *DispatcherHeartbeatReq, opts ...grpc.CallOption) (*DispatcherHeartbeatResp, error)
	SorterHeartbeat(ctx context.Context, in *SorterHeartbeatReq, opts ...grpc.CallOption) (*SorterHeartbeatResp, error)
	FetchSchemaRegistryAddr(ctx context.Context, in *FetchSchemaRegistryAddrReq, opts ...grpc.CallOption) (*FetchSchemaRegistryAddrResp, error)
	FetchRangeSorterAddr(ctx context.Context, in *FetchRangeSorterAddrReq, opts ...grpc.CallOption) (*FetchRangeSorterAddrResp, error)
}

type metaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServiceClient(cc grpc.ClientConnInterface) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) TenantHasNewChange(ctx context.Context, in *HasNewChangeReq, opts ...grpc.CallOption) (*HasNewChangeResp, error) {
	out := new(HasNewChangeResp)
	err := c.cc.Invoke(ctx, "/tistreampb.MetaService/TenantHasNewChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) DispatcherHeartbeat(ctx context.Context, in *DispatcherHeartbeatReq, opts ...grpc.CallOption) (*DispatcherHeartbeatResp, error) {
	out := new(DispatcherHeartbeatResp)
	err := c.cc.Invoke(ctx, "/tistreampb.MetaService/DispatcherHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) SorterHeartbeat(ctx context.Context, in *SorterHeartbeatReq, opts ...grpc.CallOption) (*SorterHeartbeatResp, error) {
	out := new(SorterHeartbeatResp)
	err := c.cc.Invoke(ctx, "/tistreampb.MetaService/SorterHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) FetchSchemaRegistryAddr(ctx context.Context, in *FetchSchemaRegistryAddrReq, opts ...grpc.CallOption) (*FetchSchemaRegistryAddrResp, error) {
	out := new(FetchSchemaRegistryAddrResp)
	err := c.cc.Invoke(ctx, "/tistreampb.MetaService/FetchSchemaRegistryAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) FetchRangeSorterAddr(ctx context.Context, in *FetchRangeSorterAddrReq, opts ...grpc.CallOption) (*FetchRangeSorterAddrResp, error) {
	out := new(FetchRangeSorterAddrResp)
	err := c.cc.Invoke(ctx, "/tistreampb.MetaService/FetchRangeSorterAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
// All implementations must embed UnimplementedMetaServiceServer
// for forward compatibility
type MetaServiceServer interface {
	TenantHasNewChange(context.Context, *HasNewChangeReq) (*HasNewChangeResp, error)
	DispatcherHeartbeat(context.Context, *DispatcherHeartbeatReq) (*DispatcherHeartbeatResp, error)
	SorterHeartbeat(context.Context, *SorterHeartbeatReq) (*SorterHeartbeatResp, error)
	FetchSchemaRegistryAddr(context.Context, *FetchSchemaRegistryAddrReq) (*FetchSchemaRegistryAddrResp, error)
	FetchRangeSorterAddr(context.Context, *FetchRangeSorterAddrReq) (*FetchRangeSorterAddrResp, error)
	mustEmbedUnimplementedMetaServiceServer()
}

// UnimplementedMetaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServiceServer struct {
}

func (UnimplementedMetaServiceServer) TenantHasNewChange(context.Context, *HasNewChangeReq) (*HasNewChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantHasNewChange not implemented")
}
func (UnimplementedMetaServiceServer) DispatcherHeartbeat(context.Context, *DispatcherHeartbeatReq) (*DispatcherHeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatcherHeartbeat not implemented")
}
func (UnimplementedMetaServiceServer) SorterHeartbeat(context.Context, *SorterHeartbeatReq) (*SorterHeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SorterHeartbeat not implemented")
}
func (UnimplementedMetaServiceServer) FetchSchemaRegistryAddr(context.Context, *FetchSchemaRegistryAddrReq) (*FetchSchemaRegistryAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSchemaRegistryAddr not implemented")
}
func (UnimplementedMetaServiceServer) FetchRangeSorterAddr(context.Context, *FetchRangeSorterAddrReq) (*FetchRangeSorterAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRangeSorterAddr not implemented")
}
func (UnimplementedMetaServiceServer) mustEmbedUnimplementedMetaServiceServer() {}

// UnsafeMetaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServiceServer will
// result in compilation errors.
type UnsafeMetaServiceServer interface {
	mustEmbedUnimplementedMetaServiceServer()
}

func RegisterMetaServiceServer(s grpc.ServiceRegistrar, srv MetaServiceServer) {
	s.RegisterService(&MetaService_ServiceDesc, srv)
}

func _MetaService_TenantHasNewChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasNewChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).TenantHasNewChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.MetaService/TenantHasNewChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).TenantHasNewChange(ctx, req.(*HasNewChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_DispatcherHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatcherHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).DispatcherHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.MetaService/DispatcherHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).DispatcherHeartbeat(ctx, req.(*DispatcherHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_SorterHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SorterHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).SorterHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.MetaService/SorterHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).SorterHeartbeat(ctx, req.(*SorterHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_FetchSchemaRegistryAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSchemaRegistryAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).FetchSchemaRegistryAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.MetaService/FetchSchemaRegistryAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).FetchSchemaRegistryAddr(ctx, req.(*FetchSchemaRegistryAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_FetchRangeSorterAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRangeSorterAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).FetchRangeSorterAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.MetaService/FetchRangeSorterAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).FetchRangeSorterAddr(ctx, req.(*FetchRangeSorterAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaService_ServiceDesc is the grpc.ServiceDesc for MetaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tistreampb.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantHasNewChange",
			Handler:    _MetaService_TenantHasNewChange_Handler,
		},
		{
			MethodName: "DispatcherHeartbeat",
			Handler:    _MetaService_DispatcherHeartbeat_Handler,
		},
		{
			MethodName: "SorterHeartbeat",
			Handler:    _MetaService_SorterHeartbeat_Handler,
		},
		{
			MethodName: "FetchSchemaRegistryAddr",
			Handler:    _MetaService_FetchSchemaRegistryAddr_Handler,
		},
		{
			MethodName: "FetchRangeSorterAddr",
			Handler:    _MetaService_FetchRangeSorterAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metaservicepb.proto",
}
