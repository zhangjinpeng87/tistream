// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: sorterservicepb.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SorterServiceClient is the client API for SorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SorterServiceClient interface {
	NewDataChanges(ctx context.Context, in *RangeChangesReq, opts ...grpc.CallOption) (*RangeChangesResp, error)
}

type sorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSorterServiceClient(cc grpc.ClientConnInterface) SorterServiceClient {
	return &sorterServiceClient{cc}
}

func (c *sorterServiceClient) NewDataChanges(ctx context.Context, in *RangeChangesReq, opts ...grpc.CallOption) (*RangeChangesResp, error) {
	out := new(RangeChangesResp)
	err := c.cc.Invoke(ctx, "/tistreampb.SorterService/NewDataChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SorterServiceServer is the server API for SorterService service.
// All implementations must embed UnimplementedSorterServiceServer
// for forward compatibility
type SorterServiceServer interface {
	NewDataChanges(context.Context, *RangeChangesReq) (*RangeChangesResp, error)
	mustEmbedUnimplementedSorterServiceServer()
}

// UnimplementedSorterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSorterServiceServer struct {
}

func (UnimplementedSorterServiceServer) NewDataChanges(context.Context, *RangeChangesReq) (*RangeChangesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDataChanges not implemented")
}
func (UnimplementedSorterServiceServer) mustEmbedUnimplementedSorterServiceServer() {}

// UnsafeSorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SorterServiceServer will
// result in compilation errors.
type UnsafeSorterServiceServer interface {
	mustEmbedUnimplementedSorterServiceServer()
}

func RegisterSorterServiceServer(s grpc.ServiceRegistrar, srv SorterServiceServer) {
	s.RegisterService(&SorterService_ServiceDesc, srv)
}

func _SorterService_NewDataChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeChangesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SorterServiceServer).NewDataChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.SorterService/NewDataChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SorterServiceServer).NewDataChanges(ctx, req.(*RangeChangesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SorterService_ServiceDesc is the grpc.ServiceDesc for SorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tistreampb.SorterService",
	HandlerType: (*SorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewDataChanges",
			Handler:    _SorterService_NewDataChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sorterservicepb.proto",
}
