// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: dispatcherpb.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherServiceClient is the client API for DispatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherServiceClient interface {
	NotifyTenantNewChanges(ctx context.Context, in *UpdateNotificationReq, opts ...grpc.CallOption) (*UpdateNotificationResp, error)
	HandleTenantTask(ctx context.Context, in *TenantTasksReq, opts ...grpc.CallOption) (*TenantTasksResp, error)
}

type dispatcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherServiceClient(cc grpc.ClientConnInterface) DispatcherServiceClient {
	return &dispatcherServiceClient{cc}
}

func (c *dispatcherServiceClient) NotifyTenantNewChanges(ctx context.Context, in *UpdateNotificationReq, opts ...grpc.CallOption) (*UpdateNotificationResp, error) {
	out := new(UpdateNotificationResp)
	err := c.cc.Invoke(ctx, "/tistreampb.DispatcherService/NotifyTenantNewChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherServiceClient) HandleTenantTask(ctx context.Context, in *TenantTasksReq, opts ...grpc.CallOption) (*TenantTasksResp, error) {
	out := new(TenantTasksResp)
	err := c.cc.Invoke(ctx, "/tistreampb.DispatcherService/HandleTenantTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServiceServer is the server API for DispatcherService service.
// All implementations must embed UnimplementedDispatcherServiceServer
// for forward compatibility
type DispatcherServiceServer interface {
	NotifyTenantNewChanges(context.Context, *UpdateNotificationReq) (*UpdateNotificationResp, error)
	HandleTenantTask(context.Context, *TenantTasksReq) (*TenantTasksResp, error)
	mustEmbedUnimplementedDispatcherServiceServer()
}

// UnimplementedDispatcherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherServiceServer struct {
}

func (UnimplementedDispatcherServiceServer) NotifyTenantNewChanges(context.Context, *UpdateNotificationReq) (*UpdateNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTenantNewChanges not implemented")
}
func (UnimplementedDispatcherServiceServer) HandleTenantTask(context.Context, *TenantTasksReq) (*TenantTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTenantTask not implemented")
}
func (UnimplementedDispatcherServiceServer) mustEmbedUnimplementedDispatcherServiceServer() {}

// UnsafeDispatcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherServiceServer will
// result in compilation errors.
type UnsafeDispatcherServiceServer interface {
	mustEmbedUnimplementedDispatcherServiceServer()
}

func RegisterDispatcherServiceServer(s grpc.ServiceRegistrar, srv DispatcherServiceServer) {
	s.RegisterService(&DispatcherService_ServiceDesc, srv)
}

func _DispatcherService_NotifyTenantNewChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServiceServer).NotifyTenantNewChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.DispatcherService/NotifyTenantNewChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServiceServer).NotifyTenantNewChanges(ctx, req.(*UpdateNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherService_HandleTenantTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServiceServer).HandleTenantTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tistreampb.DispatcherService/HandleTenantTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServiceServer).HandleTenantTask(ctx, req.(*TenantTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherService_ServiceDesc is the grpc.ServiceDesc for DispatcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tistreampb.DispatcherService",
	HandlerType: (*DispatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyTenantNewChanges",
			Handler:    _DispatcherService_NotifyTenantNewChanges_Handler,
		},
		{
			MethodName: "HandleTenantTask",
			Handler:    _DispatcherService_HandleTenantTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcherpb.proto",
}
